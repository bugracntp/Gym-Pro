const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// VeritabanÄ± baÄŸlantÄ±sÄ±
const dbPath = path.join(__dirname, '../database/asangym.sqlite');
const db = new sqlite3.Database(dbPath);

console.log('Test verisi ekleniyor...');

// Test Ã¼yelik tipleri ekle
const insertMembershipTypes = `
  INSERT OR REPLACE INTO uyelik_tipleri (id, tip_adi, sure_ay, fiyat, aciklama, aktif) VALUES
  (1, 'AylÄ±k Ãœyelik', 1, 150.00, '1 aylÄ±k Ã¼yelik', 1),
  (2, '3 AylÄ±k Ãœyelik', 3, 400.00, '3 aylÄ±k Ã¼yelik', 1),
  (3, '6 AylÄ±k Ãœyelik', 6, 750.00, '6 aylÄ±k Ã¼yelik', 1),
  (4, 'YÄ±llÄ±k Ãœyelik', 12, 1200.00, 'YÄ±llÄ±k Ã¼yelik', 1)
`;

// Test mÃ¼ÅŸterileri ekle
const insertCustomers = `
  INSERT OR REPLACE INTO musteriler (id, ad, soyad, telefon, email, dogum_tarihi, cinsiyet, aktif, kayit_tarihi) VALUES
  (1001, 'Test', 'MÃ¼ÅŸteri 1', '555-0001', 'test1@example.com', '1990-01-01', 'Erkek', 1, DATE('now')),
  (1002, 'Test', 'MÃ¼ÅŸteri 2', '555-0002', 'test2@example.com', '1985-05-15', 'KadÄ±n', 1, DATE('now')),
  (1003, 'Test', 'MÃ¼ÅŸteri 3', '555-0003', 'test3@example.com', '1992-12-20', 'Erkek', 1, DATE('now')),
  (1004, 'Test', 'MÃ¼ÅŸteri 4', '555-0004', 'test4@example.com', '1988-08-10', 'KadÄ±n', 1, DATE('now')),
  (1005, 'Test', 'MÃ¼ÅŸteri 5', '555-0005', 'test5@example.com', '1995-03-25', 'Erkek', 1, DATE('now'))
`;

// Test Ã¼yelikleri ekle
const insertMemberships = `
  INSERT OR REPLACE INTO uyelikler (id, musteri_id, uyelik_tipi_id, baslangic_tarihi, bitis_tarihi, ucret, odeme_durumu, aktif) VALUES
  (2001, 1001, 1, DATE('now', '-30 days'), DATE('now', '+30 days'), 150.00, 'Bekliyor', 1),
  (2002, 1002, 2, DATE('now', '-60 days'), DATE('now', '+30 days'), 400.00, 'KÄ±smi Ã–dendi', 1),
  (2003, 1003, 4, DATE('now', '-90 days'), DATE('now', '+270 days'), 1200.00, 'Bekliyor', 1),
  (2004, 1004, 1, DATE('now', '-15 days'), DATE('now', '+45 days'), 150.00, 'GecikmiÅŸ', 1),
  (2005, 1005, 3, DATE('now', '-45 days'), DATE('now', '+135 days'), 750.00, 'Bekliyor', 1)
`;

// Test Ã¶demeleri ekle
const insertPayments = `
  INSERT OR REPLACE INTO odemeler (id, musteri_id, uyelik_id, odenen_tutar, odeme_tarihi, odeme_yontemi, aciklama) VALUES
  (3001, 1001, 2001, 0.00, NULL, NULL, 'HenÃ¼z Ã¶deme yapÄ±lmadÄ±'),
  (3002, 1002, 2002, 200.00, DATE('now', '-30 days'), 'Nakit', '200 TL Ã¶dendi, 200 TL kaldÄ±'),
  (3003, 1003, 2003, 0.00, NULL, NULL, 'HenÃ¼z Ã¶deme yapÄ±lmadÄ±'),
  (3004, 1004, 2004, 0.00, NULL, NULL, 'Ã–deme tarihi geÃ§ti'),
  (3005, 1005, 2005, 0.00, NULL, NULL, 'HenÃ¼z Ã¶deme yapÄ±lmadÄ±')
`;

// Verileri ekle
db.serialize(() => {
  // Ãœyelik tiplerini ekle
  db.run(insertMembershipTypes, (err) => {
    if (err) {
      console.error('Ãœyelik tipleri eklenirken hata:', err);
    } else {
      console.log('âœ… Test Ã¼yelik tipleri eklendi');
    }
  });

  // MÃ¼ÅŸterileri ekle
  db.run(insertCustomers, (err) => {
    if (err) {
      console.error('MÃ¼ÅŸteriler eklenirken hata:', err);
    } else {
      console.log('âœ… Test mÃ¼ÅŸterileri eklendi');
    }
  });

  // Ãœyelikleri ekle
  db.run(insertMemberships, (err) => {
    if (err) {
      console.error('Ãœyelikler eklenirken hata:', err);
    } else {
      console.log('âœ… Test Ã¼yelikleri eklendi');
    }
  });

  // Ã–demeleri ekle
  db.run(insertPayments, (err) => {
    if (err) {
      console.error('Ã–demeler eklenirken hata:', err);
    } else {
      console.log('âœ… Test Ã¶demeleri eklendi');
    }
  });

  // Verileri kontrol et
  setTimeout(() => {
    const checkQuery = `
      SELECT 
        m.ad || ' ' || m.soyad as ad_soyad,
        m.telefon,
        ut.tip_adi as uyelik_tipi,
        u.baslangic_tarihi,
        u.bitis_tarihi,
        u.ucret,
        u.odeme_durumu
      FROM musteriler m
      JOIN uyelikler u ON m.id = u.musteri_id
      JOIN uyelik_tipleri ut ON u.uyelik_tipi_id = ut.id
      WHERE m.aktif = 1 
        AND u.aktif = 1 
        AND u.odeme_durumu != 'Ã–dendi'
        AND u.bitis_tarihi >= DATE('now', 'localtime')
      ORDER BY u.baslangic_tarihi ASC, m.ad ASC
    `;

    db.all(checkQuery, [], (err, rows) => {
      if (err) {
        console.error('Veri kontrolÃ¼nde hata:', err);
      } else {
        console.log('\nğŸ“Š Ã–demesi yapÄ±lmayan mÃ¼ÅŸteriler:');
        console.table(rows);
        console.log(`\nToplam: ${rows.length} mÃ¼ÅŸteri`);
      }
      
      // VeritabanÄ± baÄŸlantÄ±sÄ±nÄ± kapat
      db.close();
      console.log('\nâœ… Test verisi ekleme tamamlandÄ±!');
    });
  }, 1000);
}); 